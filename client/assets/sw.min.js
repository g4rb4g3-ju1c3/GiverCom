self.importScripts("idb-keyval-iife.min.js");const e=!0,t="https://givercom.ml",i=new idbKeyval.Store("Give'rCom","Shiznits");function n(e,t){return"string"!=typeof e||""===e?Promise.resolve():("string"!=typeof t&&(t=null),clients.matchAll({type:"window"}).then(function(i){if(i)for(var n=0;n<i.length;n++)i[n].postMessage({msg:e,payload:t});return Promise.resolve()}).catch(function(e){return c("post_client_message: clients.matchAll error"),s(e),Promise.resolve()}))}function r(e,t){e||(e="");const n=idbKeyval.set("last_clear_notification",t,i).then(function(){return Promise.resolve()}).catch(function(e){return c("clear_notifications: idbKeyval.set error"),s(e),Promise.resolve()}),r={};""!==e&&(r.tag=e);const a=self.registration.getNotifications(r).then(function(e){for(var t in e)o("clear_notifications: closing: "+e[t].tag),e[t].close();return Promise.resolve()}).catch(function(e){return c("clear_notifications: registration.getNotifications error"),s(e),Promise.resolve()});return Promise.all([n,a])}function o(t){e&&console.log(t)}function s(t){e&&console.dir(t)}function a(t){e&&console.info(t)}function c(t){e&&console.warn(t)}function l(t){e&&console.error(t)}self.addEventListener("install",function(e){o("ServiceWorker.install")}),self.addEventListener("activate",function(e){o("ServiceWorker.activate")}),self.addEventListener("fetch",function(e){const t=new URL(e.request.url);if("GET"===e.request.method&&-1!==t.pathname.indexOf("/share"))return new Response("yuo = A-OK #1 usar!!!!11<br><br>"+t.pathname);"POST"===e.request.method&&"/share"===t.pathname.slice(-6)&&e.respondWith(async function(){const i=await e.request.formData(),s=JSON.stringify({title:i.get("title"),text:i.get("text"),url:i.get("url")});return o("ServiceWorker.fetch: "+e.request.method+" "+t.origin+" "+t.pathname+" "+s),e.waitUntil(n("share_incoming",s)),new Response("yuo = A-OK #1 usar!!!!11")}())}),self.addEventListener("message",function(e){if(e.data){const t=JSON.parse(e.data);switch(t.msg){case"user_settings":e.waitUntil(idbKeyval.set("user_settings_show_notifications",t.user.settings.messages.notifications,i).then(function(){return o("ServiceWorker.message: user_settings: saved user_settings_show_notifications: "+t.user.settings.messages.notifications),Promise.resolve()}).catch(function(e){return c("ServiceWorker.message: user_settings: idbKeyval.set(user_settings_show_notifications) error"),s(e),Promise.resolve()}).then(idbKeyval.set("user_settings_show_notifications_content",t.user.settings.messages.notifications_content,i)).then(function(){return o("ServiceWorker.message: user_settings: saved user_settings_show_notifications_content: "+t.user.settings.messages.notifications_content),Promise.resolve()}).catch(function(e){return c("ServiceWorker.message: user_settings: idbKeyval.set(user_settings_show_notifications_content) error"),s(e),Promise.resolve()}));break;case"clear_notifications":t.timestamp=Date.now(),o("ServiceWorker.message: clear_notifications:  "+t.timestamp),e.waitUntil(r(t.tag,t.timestamp))}}}),self.addEventListener("push",function(e){if(!e.data)return void c("ServiceWorker.push: No event data");o("ServiceWorker.push: "+JSON.stringify(e.data));const t=JSON.parse(e.data.text());if(""!=t.title){var a=0,l=!1,u=!1;e.waitUntil(Promise.all([idbKeyval.get("last_clear_notification",i).then(function(e){return a=e,Promise.resolve()}).catch(function(e){return c("ServiceWorker.push: idbKeyval.get(last_clear_notification) error"),s(e),Promise.resolve()}),idbKeyval.get("user_settings_show_notifications",i).then(function(e){return l=e,Promise.resolve()}).catch(function(e){return c("ServiceWorker.push: idbKeyval.get(user_settings_show_notifications) error"),s(e),Promise.resolve()}),idbKeyval.get("user_settings_show_notifications_content",i).then(function(e){return u=e,Promise.resolve()}).catch(function(e){return c("ServiceWorker.push: idbKeyval.get(user_settings_show_notifications_content) error"),s(e),Promise.resolve()})]).then(function(){return o("ServiceWorker.push: Incoming notification:   "+t.timestamp+": "+(t.timestamp-a)),l?t.timestamp<=a?(o("ServiceWorker.push: Not showing notification: Timestamp before notifications cleared"),Promise.resolve()):clients.matchAll({type:"window"}).then(function(e){return!e||e[0].focused&&"visible"===e[0].visibilityState?(o("ServiceWorker.push: Not showing notification: Client visible and focused"),Promise.resolve()):(u||(o("ServiceWorker.push: Not showing notification content: User setting is disabled"),t.body=""),self.registration.showNotification(t.title,t))}).catch(function(e){return c("ServiceWorker.push: clients.matchAll error"),s(e),Promise.resolve()}):(o("ServiceWorker.push: Not showing notification: User setting is disabled"),Promise.resolve())}))}else o("ServiceWorker.push: clear_notifications:     "+t.timestamp),e.waitUntil(Promise.all([n("msg_clear_new_msg_indicator"),r(t.tag,t.timestamp)]))}),self.addEventListener("notificationclick",function(e){o("ServiceWorker.notificationclick: "+e.action),e.notification.close(),e.waitUntil(clients.matchAll({type:"window"}).then(function(e){return e?e[0].focus():clients.openWindow(t)}).catch(function(e){return c("ServiceWorker.push: clients.matchAll error"),s(e),Promise.resolve()}).then(function(){return e.action?n(e.action):Promise.resolve()}))}),self.addEventListener("error",function(e){c("ServiceWorker.error"),s(e)});
//# sourceMappingURL=sw.min.js.map