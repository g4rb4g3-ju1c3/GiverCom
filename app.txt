


TODO:

- center on search result

- conversations
  - add people
  - browse all files
    - infinite scroll
  - categories
    - predefined archive/hidden category collapsed by default
  - read-only
  - timezone
  - archive for download

- logout of current device or all devices

- boss key - show url in iframe, disable notifications temporarily

- lightbox
  - center on mouse click when zooming
  - pinch zoom only on image

- android
  - notification background image
  - find better way to stop back button closing app

- look up page title for links

- emoji sizes, black santa
- recent emojis
- get missing emojis: bed, cheese, sandwich, egg, avacado, slush, chef hat

- admin option to set ban message on user (in settings, not accessible from main user settings)

- check new message timestamp on the server to see if the client clock is way off

- scroll whole page on touch devices

- minify html

- dysfunctional tip of the day

- end-to-end encryption with password for conversation
- db ssl: /etc/mysql/mariadb.conf.d

- IPv6

- redis



-------
Startup
-------

CLIENT
   HTTP GET /

   30-login.js:$document.ready()
      $("#welcome").click()
         login_dialog_show()
            user_login()
               AJAX POST /LOGIN
                  success
                     socket.connect()
                  error
                     show message
      user_login_token()
         AJAX GET /LOGIN
            success
               socket.connect()
            error
               ui_update()
               ui_page_cover_remove()

   socket.connect()
      socket.ws = new WebSocket()

SERVER
   ws.js:app.exp.ws("/")
      session_token = auth.get_session_token(req)
      SELECT tokens.current_cnv, tokens.description AS ua_prev, users.id, users.username, users.name, users.public, users.settings, users.current_cnv AS current_cnv_user FROM users INNER JOIN tokens ON users.id = tokens.user_id AND tokens.token = <session_token>
         UPDATE tokens SET description = <user-agent>, updated = CURRENT_TIMESTAMP(6) WHERE token = <session_token>
         Initialize the socket object...
         if ((socket.user.current_cnv === 0) && (socket.user.current_cnv_user !== 0))
            UPDATE tokens SET current_cnv = <socket.user.current_cnv_user> WHERE token = <session_token>
         socket_init(socket)
         socket.emit_msg("app_start")

CLIENT
   socket.connect()
      socket.open()
         set_online(true)
         trigger_event("connected")
         net_timer_start()

   30-login.js:socket.on("app_start")
      ui_load_indicator_show();
      callback();
      app_update_push_sub();
      socket.emit("user_load")
         user_load(user)

SERVER
   socket.on("user_load")
      SELECT id FROM conversations INNER JOIN users_conversations ON conversations.id = users_conversations.conversation_id WHERE users_conversations.user_id = <socket.user.id>
      Join all conversations the user is in...
      callback(user)

CLIENT
   user_load(user)
      if (user)
         current_user = user
         app_sw_update_user_settings()
         cnv_load(user.current_cnv)
         ui_page_cover_remove()
      else
         user_clear()

   cnv_load(cnv_id)
      socket.emit("cnv_load")
         ui_typing_indicator_hide()
         cnv_set(cnv)
         $conversation.empty()
         ui_update()
         cnv_load_latest_messages()
            cnv_load_messages("last")
            ui_load_indicator_hide()
            ui_page_cover_remove()

SERVER
   socket.on("cnv_load")
   SELECT conversations.id, conversations.name, conversations.settings, users_conversations.settings AS user_settings FROM conversations INNER JOIN users_conversations ON users_conversations.conversation_id = conversations.id AND users_conversations.user_id = <socket.user.id> WHERE conversations.id = <cnv_id>
      UPDATE tokens SET current_cnv = <cnv_id> WHERE token = <socket.token>
      UPDATE users SET current_cnv = <cnv_id> WHERE id = <socket.user.id>
      SELECT name FROM users INNER JOIN users_conversations ON users.id = users_conversations.user_id WHERE users_conversations.conversation_id = <cnv_id> ORDER BY name ASC
         callback(cnv)

CLIENT
   cnv_load_messages()
      socket.emit("cnv_load_msg_range")
         Add/update the messages to the conversation view...
         cnv_scroll_bottom()
         msg_confirm_delivery(id_list)
         callback()



-------------
Dis/reconnect
-------------

CLIENT
   socket.close()
      set_online(false)
      net_timer_stop()
      socket.ws = null
      delete socket.ws_sockets[this.id]
      // Reconnect if appropriate and online:
      if (navigator.onLine && !document.hidden)
         switch (event.code)
            // Don't reconnect if a login failed to prevent constant attempts that always fail:
            case WS_CC_FORBIDDEN:
               ui_page_cover_remove()
            // Don't reconnect if the network connection was lost:
            case WS_CC_CLIENT_OFFLINE:
            // Don't reconnect if the user logged out:
            case WS_CC_CLIENT_LOGOUT:
               break
            // Pause before reconnecting if the server shut down:
            //    This prevents pointless reconnect attempts while the server waits for a grace period before actually exiting.
            case WS_CC_SERVER_SHUTDOWN:
               setTimeout(socket.reconnect, SHUTDOWN_GRACE_PERIOD)
               break
            // Otherwise reconnect immediately:
            default:
               socket.reconnect()
               break
      trigger_event("closed", event)

20-ui.js
   $document.on("visibilitychange")
      if (!document.hidden)
         if (user_logged_in() && !socket.connected)
            socket.reconnect()



------------
Send message
------------



CLIENT
   msg_input_send()
      msg_send($msg_body_input.html())
         // Sanitize text, send command messages, convert emojis, embed stuff...
         msg_add(msg, $insert_point)
         cnv_scroll_bottom()
         socket.emit("msg_new")
            msg_set_status($msg, MSG_STATUS_RECEIVED)
      $msg_body_input.empty()
      ui_resize()

SERVER
   socket.on("msg_new")
      msg.status = MSG_STATUS_RECEIVED
      app.db.query("INSERT INTO messages (user_id, cnv_id, status, body) VALUES (socket.user.id, socket.cnv_id, msg.status, msg.body)")
         callback(db_msg_id)
         socket.broadcast("msg_new", msg)
         // Prepare message for notification...
         send_notification(push_sub.sub, ...)



SERVER
   socket.on("msg_delivered", function(id_list)
      socket.broadcast("msg_delivered", id_list);
      msg_update_status(id_list, MSG_STATUS_UNREAD)

   socket.on("msg_read", function(id_list)
      socket.broadcast("msg_read", id_list);
      msg_update_status(id_list, MSG_STATUS_READ)

   msg_update_status(id_list, status)
      // Update the status for each message in the database:
      const pq = app.db.prepare("UPDATE messages SET status = \"" + status + "\" WHERE id = ?");



node-sass needs --unsafe-perm to install globally:
npm i node-sass -g --unsafe-perm



--------------------------------------------------------------------------------



Web Push HTTP Status Codes

There are a range of issues that can result in a non-201 response code from a push service. Below is a list of HTTP status codes and what they mean in relation to web push.
Status Code    Description
429   Too many requests. Your application server has reached a rate limit with a push service. The response from the service should include a 'Retry-After' header to indicate how long before another request can be made.
400   Invalid request. One of your headers is invalid or poorly formatted.
404   Not Found. The subscription has expired. In this case you should delete the PushSubscription from your back end and wait for an opportunity to resubscribe the user.
410   Gone. The subscription is no longer valid and should be removed from your back end. This can be reproduced by calling `unsubscribe()` on a `PushSubscription`.
413   Payload size too large. The minimum size payload a push service must support is 4096 bytes (or 4kb). Anything larger can result in this error.



remove dom.ipc.multiOptOut to restore multiple content processes (disabled to debug service worker)



# Install .service as symlink in /etc/systemd/system (not /lib/systemd/system for installed packages):
systemctl enable <fullpath>/<app>.service
# which creates a symlink in /etc/systemd/system/multi-user.target.wants
# It should also have go-rw or you get "Configuration file <path>/<app>.service is marked world-inaccessible." (will proceed anyway though) in syslog



